{
  "version": 3,
  "sources": ["../../../../../src/experimental/wallet/channel/events.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport type { InferOutput } from 'valibot';\nimport {\n\tany,\n\tarray,\n\tliteral,\n\tobject,\n\toptional,\n\tpipe,\n\trecord,\n\tstring,\n\turl,\n\tuuid,\n\tvariant,\n} from 'valibot';\n\nexport const StashedRequestData = variant('type', [\n\tobject({\n\t\ttype: literal('connect'),\n\t}),\n\tobject({\n\t\ttype: literal('sign-transaction'),\n\t\ttransaction: string('`transaction` is required'),\n\t\taddress: string('`address` is required'),\n\t\tchain: string('`chain` is required'),\n\t\tsession: string('`session` is required'),\n\t}),\n\tobject({\n\t\ttype: literal('sign-and-execute-transaction'),\n\t\ttransaction: string('`transaction` is required'),\n\t\taddress: string('`address` is required'),\n\t\tchain: string('`chain` is required'),\n\t\tsession: string('`session` is required'),\n\t}),\n\tobject({\n\t\ttype: literal('sign-personal-message'),\n\t\tchain: optional(string('`chain` is required')),\n\t\tmessage: string('`message` is required'),\n\t\taddress: string('`address` is required'),\n\t\tsession: string('`session` is required'),\n\t}),\n]);\nexport type StashedRequestData = InferOutput<typeof StashedRequestData>;\n\nexport const StashedRequest = object({\n\tversion: literal('v1'),\n\trequestId: pipe(string('`requestId` is required'), uuid()),\n\tappUrl: pipe(string(), url('`appUrl` must be a valid URL')),\n\tappName: string('`appName` is required'),\n\tpayload: StashedRequestData,\n\tmetadata: optional(record(string(), any())),\n});\n\nexport type StashedRequest = InferOutput<typeof StashedRequest>;\n\nexport const StashedResponseData = variant('type', [\n\tobject({\n\t\ttype: literal('connect'),\n\t\taccounts: array(\n\t\t\tobject({\n\t\t\t\taddress: string('`address` is required'),\n\t\t\t\tpublicKey: optional(string('`publicKey` must be a string')),\n\t\t\t}),\n\t\t),\n\t\tsession: string('`session` is required'),\n\t}),\n\tobject({\n\t\ttype: literal('sign-transaction'),\n\t\tbytes: string(),\n\t\tsignature: string(),\n\t}),\n\tobject({\n\t\ttype: literal('sign-and-execute-transaction'),\n\t\tbytes: string(),\n\t\tsignature: string(),\n\t\tdigest: string(),\n\t\teffects: optional(string()),\n\t}),\n\tobject({\n\t\ttype: literal('sign-personal-message'),\n\t\tbytes: string(),\n\t\tsignature: string(),\n\t}),\n]);\nexport type StashedResponseData = InferOutput<typeof StashedResponseData>;\n\nexport const StashedResponsePayload = variant('type', [\n\tobject({\n\t\ttype: literal('reject'),\n\t\treason: optional(string('`reason` must be a string')),\n\t}),\n\tobject({\n\t\ttype: literal('resolve'),\n\t\tdata: StashedResponseData,\n\t}),\n]);\nexport type StashedResponsePayload = InferOutput<typeof StashedResponsePayload>;\n\nexport const StashedResponse = object({\n\tid: pipe(string(), uuid()),\n\tsource: literal('stashed-channel'),\n\tpayload: StashedResponsePayload,\n\tversion: literal('v1'),\n});\nexport type StashedResponse = InferOutput<typeof StashedResponse>;\n\nexport type StashedRequestTypes = Record<string, any> & {\n\t[P in StashedRequestData as P['type']]: P;\n};\n\nexport type StashedResponseTypes = {\n\t[P in StashedResponseData as P['type']]: P;\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA,qBAYO;AAEA,MAAM,yBAAqB,wBAAQ,QAAQ;AAAA,MACjD,uBAAO;AAAA,IACN,UAAM,wBAAQ,SAAS;AAAA,EACxB,CAAC;AAAA,MACD,uBAAO;AAAA,IACN,UAAM,wBAAQ,kBAAkB;AAAA,IAChC,iBAAa,uBAAO,2BAA2B;AAAA,IAC/C,aAAS,uBAAO,uBAAuB;AAAA,IACvC,WAAO,uBAAO,qBAAqB;AAAA,IACnC,aAAS,uBAAO,uBAAuB;AAAA,EACxC,CAAC;AAAA,MACD,uBAAO;AAAA,IACN,UAAM,wBAAQ,8BAA8B;AAAA,IAC5C,iBAAa,uBAAO,2BAA2B;AAAA,IAC/C,aAAS,uBAAO,uBAAuB;AAAA,IACvC,WAAO,uBAAO,qBAAqB;AAAA,IACnC,aAAS,uBAAO,uBAAuB;AAAA,EACxC,CAAC;AAAA,MACD,uBAAO;AAAA,IACN,UAAM,wBAAQ,uBAAuB;AAAA,IACrC,WAAO,6BAAS,uBAAO,qBAAqB,CAAC;AAAA,IAC7C,aAAS,uBAAO,uBAAuB;AAAA,IACvC,aAAS,uBAAO,uBAAuB;AAAA,IACvC,aAAS,uBAAO,uBAAuB;AAAA,EACxC,CAAC;AACF,CAAC;AAGM,MAAM,qBAAiB,uBAAO;AAAA,EACpC,aAAS,wBAAQ,IAAI;AAAA,EACrB,eAAW,yBAAK,uBAAO,yBAAyB,OAAG,qBAAK,CAAC;AAAA,EACzD,YAAQ,yBAAK,uBAAO,OAAG,oBAAI,8BAA8B,CAAC;AAAA,EAC1D,aAAS,uBAAO,uBAAuB;AAAA,EACvC,SAAS;AAAA,EACT,cAAU,6BAAS,2BAAO,uBAAO,OAAG,oBAAI,CAAC,CAAC;AAC3C,CAAC;AAIM,MAAM,0BAAsB,wBAAQ,QAAQ;AAAA,MAClD,uBAAO;AAAA,IACN,UAAM,wBAAQ,SAAS;AAAA,IACvB,cAAU;AAAA,UACT,uBAAO;AAAA,QACN,aAAS,uBAAO,uBAAuB;AAAA,QACvC,eAAW,6BAAS,uBAAO,8BAA8B,CAAC;AAAA,MAC3D,CAAC;AAAA,IACF;AAAA,IACA,aAAS,uBAAO,uBAAuB;AAAA,EACxC,CAAC;AAAA,MACD,uBAAO;AAAA,IACN,UAAM,wBAAQ,kBAAkB;AAAA,IAChC,WAAO,uBAAO;AAAA,IACd,eAAW,uBAAO;AAAA,EACnB,CAAC;AAAA,MACD,uBAAO;AAAA,IACN,UAAM,wBAAQ,8BAA8B;AAAA,IAC5C,WAAO,uBAAO;AAAA,IACd,eAAW,uBAAO;AAAA,IAClB,YAAQ,uBAAO;AAAA,IACf,aAAS,6BAAS,uBAAO,CAAC;AAAA,EAC3B,CAAC;AAAA,MACD,uBAAO;AAAA,IACN,UAAM,wBAAQ,uBAAuB;AAAA,IACrC,WAAO,uBAAO;AAAA,IACd,eAAW,uBAAO;AAAA,EACnB,CAAC;AACF,CAAC;AAGM,MAAM,6BAAyB,wBAAQ,QAAQ;AAAA,MACrD,uBAAO;AAAA,IACN,UAAM,wBAAQ,QAAQ;AAAA,IACtB,YAAQ,6BAAS,uBAAO,2BAA2B,CAAC;AAAA,EACrD,CAAC;AAAA,MACD,uBAAO;AAAA,IACN,UAAM,wBAAQ,SAAS;AAAA,IACvB,MAAM;AAAA,EACP,CAAC;AACF,CAAC;AAGM,MAAM,sBAAkB,uBAAO;AAAA,EACrC,QAAI,yBAAK,uBAAO,OAAG,qBAAK,CAAC;AAAA,EACzB,YAAQ,wBAAQ,iBAAiB;AAAA,EACjC,SAAS;AAAA,EACT,aAAS,wBAAQ,IAAI;AACtB,CAAC;",
  "names": []
}
