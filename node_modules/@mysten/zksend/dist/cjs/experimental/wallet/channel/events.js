"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var events_exports = {};
__export(events_exports, {
  StashedRequest: () => StashedRequest,
  StashedRequestData: () => StashedRequestData,
  StashedResponse: () => StashedResponse,
  StashedResponseData: () => StashedResponseData,
  StashedResponsePayload: () => StashedResponsePayload
});
module.exports = __toCommonJS(events_exports);
var import_valibot = require("valibot");
const StashedRequestData = (0, import_valibot.variant)("type", [
  (0, import_valibot.object)({
    type: (0, import_valibot.literal)("connect")
  }),
  (0, import_valibot.object)({
    type: (0, import_valibot.literal)("sign-transaction"),
    transaction: (0, import_valibot.string)("`transaction` is required"),
    address: (0, import_valibot.string)("`address` is required"),
    chain: (0, import_valibot.string)("`chain` is required"),
    session: (0, import_valibot.string)("`session` is required")
  }),
  (0, import_valibot.object)({
    type: (0, import_valibot.literal)("sign-and-execute-transaction"),
    transaction: (0, import_valibot.string)("`transaction` is required"),
    address: (0, import_valibot.string)("`address` is required"),
    chain: (0, import_valibot.string)("`chain` is required"),
    session: (0, import_valibot.string)("`session` is required")
  }),
  (0, import_valibot.object)({
    type: (0, import_valibot.literal)("sign-personal-message"),
    chain: (0, import_valibot.optional)((0, import_valibot.string)("`chain` is required")),
    message: (0, import_valibot.string)("`message` is required"),
    address: (0, import_valibot.string)("`address` is required"),
    session: (0, import_valibot.string)("`session` is required")
  })
]);
const StashedRequest = (0, import_valibot.object)({
  version: (0, import_valibot.literal)("v1"),
  requestId: (0, import_valibot.pipe)((0, import_valibot.string)("`requestId` is required"), (0, import_valibot.uuid)()),
  appUrl: (0, import_valibot.pipe)((0, import_valibot.string)(), (0, import_valibot.url)("`appUrl` must be a valid URL")),
  appName: (0, import_valibot.string)("`appName` is required"),
  payload: StashedRequestData,
  metadata: (0, import_valibot.optional)((0, import_valibot.record)((0, import_valibot.string)(), (0, import_valibot.any)()))
});
const StashedResponseData = (0, import_valibot.variant)("type", [
  (0, import_valibot.object)({
    type: (0, import_valibot.literal)("connect"),
    accounts: (0, import_valibot.array)(
      (0, import_valibot.object)({
        address: (0, import_valibot.string)("`address` is required"),
        publicKey: (0, import_valibot.optional)((0, import_valibot.string)("`publicKey` must be a string"))
      })
    ),
    session: (0, import_valibot.string)("`session` is required")
  }),
  (0, import_valibot.object)({
    type: (0, import_valibot.literal)("sign-transaction"),
    bytes: (0, import_valibot.string)(),
    signature: (0, import_valibot.string)()
  }),
  (0, import_valibot.object)({
    type: (0, import_valibot.literal)("sign-and-execute-transaction"),
    bytes: (0, import_valibot.string)(),
    signature: (0, import_valibot.string)(),
    digest: (0, import_valibot.string)(),
    effects: (0, import_valibot.optional)((0, import_valibot.string)())
  }),
  (0, import_valibot.object)({
    type: (0, import_valibot.literal)("sign-personal-message"),
    bytes: (0, import_valibot.string)(),
    signature: (0, import_valibot.string)()
  })
]);
const StashedResponsePayload = (0, import_valibot.variant)("type", [
  (0, import_valibot.object)({
    type: (0, import_valibot.literal)("reject"),
    reason: (0, import_valibot.optional)((0, import_valibot.string)("`reason` must be a string"))
  }),
  (0, import_valibot.object)({
    type: (0, import_valibot.literal)("resolve"),
    data: StashedResponseData
  })
]);
const StashedResponse = (0, import_valibot.object)({
  id: (0, import_valibot.pipe)((0, import_valibot.string)(), (0, import_valibot.uuid)()),
  source: (0, import_valibot.literal)("stashed-channel"),
  payload: StashedResponsePayload,
  version: (0, import_valibot.literal)("v1")
});
//# sourceMappingURL=events.js.map
