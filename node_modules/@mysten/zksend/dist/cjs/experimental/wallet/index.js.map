{
  "version": 3,
  "sources": ["../../../../src/experimental/wallet/index.ts"],
  "sourcesContent": ["// Copyright (c) Mysten Labs, Inc.\n// SPDX-License-Identifier: Apache-2.0\n\nimport { Transaction } from '@mysten/sui/transactions';\nimport { fromBase64, toBase64 } from '@mysten/sui/utils';\nimport type {\n\tStandardConnectFeature,\n\tStandardConnectMethod,\n\tStandardDisconnectFeature,\n\tStandardDisconnectMethod,\n\tStandardEventsFeature,\n\tStandardEventsListeners,\n\tStandardEventsOnMethod,\n\tSuiChain,\n\tSuiSignAndExecuteTransactionFeature,\n\tSuiSignAndExecuteTransactionMethod,\n\tSuiSignPersonalMessageFeature,\n\tSuiSignPersonalMessageMethod,\n\tSuiSignTransactionBlockFeature,\n\tSuiSignTransactionBlockMethod,\n\tSuiSignTransactionFeature,\n\tSuiSignTransactionMethod,\n\tWallet,\n\tWalletIcon,\n} from '@mysten/wallet-standard';\nimport {\n\tgetWallets,\n\tReadonlyWalletAccount,\n\tSUI_CHAINS,\n\tSUI_MAINNET_CHAIN,\n} from '@mysten/wallet-standard';\nimport type { Emitter } from 'mitt';\nimport mitt from 'mitt';\nimport type { InferOutput } from 'valibot';\nimport { boolean, object, parse, string } from 'valibot';\n\nimport { DEFAULT_STASHED_ORIGIN, StashedPopup } from './channel/index.js';\n\ntype WalletEventsMap = {\n\t[E in keyof StandardEventsListeners]: Parameters<StandardEventsListeners[E]>[0];\n};\n\nconst STASHED_SESSION_KEY = 'stashed:session';\n\nexport const STASHED_WALLET_NAME = 'Stashed' as const;\ntype StashedAccount = { address: string; publicKey?: string };\n\nconst getStashedSession = (): { accounts: StashedAccount[]; token: string } => {\n\tconst { accounts = [], token } = JSON.parse(localStorage.getItem(STASHED_SESSION_KEY) || '{}');\n\treturn { accounts, token };\n};\n\nconst SUI_WALLET_EXTENSION_ID = 'com.mystenlabs.suiwallet' as const;\nconst METADATA_API_URL = 'http://localhost:3001/api/wallet/metadata';\n\nconst WalletMetadataSchema = object({\n\tid: string('Wallet ID is required'),\n\twalletName: string('Wallet name is required'),\n\ticon: string('Icon must be a valid wallet icon format'),\n\tenabled: boolean('Enabled is required'),\n});\n\ntype WalletMetadata = InferOutput<typeof WalletMetadataSchema>;\nexport class StashedWallet implements Wallet {\n\t#id: string;\n\t#events: Emitter<WalletEventsMap>;\n\t#accounts: ReadonlyWalletAccount[];\n\t#origin: string;\n\t#walletName: string;\n\t#icon: WalletIcon;\n\t#name: string;\n\n\tget name() {\n\t\treturn this.#walletName;\n\t}\n\n\tget id() {\n\t\treturn this.#id;\n\t}\n\n\tget icon() {\n\t\treturn this.#icon;\n\t}\n\n\tget version() {\n\t\treturn '1.0.0' as const;\n\t}\n\n\tget chains() {\n\t\treturn SUI_CHAINS;\n\t}\n\n\tget accounts() {\n\t\treturn this.#accounts;\n\t}\n\n\tget features(): StandardConnectFeature &\n\t\tStandardDisconnectFeature &\n\t\tStandardEventsFeature &\n\t\tSuiSignTransactionBlockFeature &\n\t\tSuiSignTransactionFeature &\n\t\tSuiSignPersonalMessageFeature &\n\t\tSuiSignAndExecuteTransactionFeature {\n\t\treturn {\n\t\t\t'standard:connect': {\n\t\t\t\tversion: '1.0.0',\n\t\t\t\tconnect: this.#connect,\n\t\t\t},\n\t\t\t'standard:disconnect': {\n\t\t\t\tversion: '1.0.0',\n\t\t\t\tdisconnect: this.#disconnect,\n\t\t\t},\n\t\t\t'standard:events': {\n\t\t\t\tversion: '1.0.0',\n\t\t\t\ton: this.#on,\n\t\t\t},\n\t\t\t'sui:signTransactionBlock': {\n\t\t\t\tversion: '1.0.0',\n\t\t\t\tsignTransactionBlock: this.#signTransactionBlock,\n\t\t\t},\n\t\t\t'sui:signTransaction': {\n\t\t\t\tversion: '2.0.0',\n\t\t\t\tsignTransaction: this.#signTransaction,\n\t\t\t},\n\t\t\t'sui:signPersonalMessage': {\n\t\t\t\tversion: '1.1.0',\n\t\t\t\tsignPersonalMessage: this.#signPersonalMessage,\n\t\t\t},\n\t\t\t'sui:signAndExecuteTransaction': {\n\t\t\t\tversion: '2.0.0',\n\t\t\t\tsignAndExecuteTransaction: this.#signAndExecuteTransaction,\n\t\t\t},\n\t\t};\n\t}\n\n\tconstructor({\n\t\tname,\n\t\torigin,\n\t\tmetadata,\n\t}: {\n\t\tname: string;\n\t\torigin?: string;\n\t\tchain?: SuiChain;\n\t\tmetadata: WalletMetadata;\n\t}) {\n\t\tthis.#id = metadata.id;\n\t\tthis.#accounts = [];\n\t\tthis.#events = mitt();\n\t\tthis.#origin = origin || DEFAULT_STASHED_ORIGIN;\n\t\tthis.#name = name;\n\t\tthis.#walletName = metadata.walletName;\n\t\tthis.#icon = metadata.icon as WalletIcon;\n\t}\n\n\t#signTransactionBlock: SuiSignTransactionBlockMethod = async ({\n\t\ttransactionBlock,\n\t\taccount,\n\t\tchain,\n\t}) => {\n\t\ttransactionBlock.setSenderIfNotSet(account.address);\n\n\t\tconst data = await transactionBlock.toJSON();\n\n\t\tconst popup = new StashedPopup({\n\t\t\tname: this.#name,\n\t\t\torigin: this.#origin,\n\t\t});\n\n\t\tconst response = await popup.send({\n\t\t\ttype: 'sign-transaction',\n\t\t\ttransaction: data,\n\t\t\taddress: account.address,\n\t\t\tchain,\n\t\t\tsession: getStashedSession().token,\n\t\t});\n\n\t\treturn {\n\t\t\ttransactionBlockBytes: response.bytes,\n\t\t\tsignature: response.signature,\n\t\t};\n\t};\n\n\t#signTransaction: SuiSignTransactionMethod = async ({ transaction, account, chain }) => {\n\t\tconst popup = new StashedPopup({\n\t\t\tname: this.#name,\n\t\t\torigin: this.#origin,\n\t\t\tchain,\n\t\t});\n\n\t\tconst tx = await transaction.toJSON();\n\n\t\tconst response = await popup.send({\n\t\t\ttype: 'sign-transaction',\n\t\t\ttransaction: tx,\n\t\t\taddress: account.address,\n\t\t\tchain,\n\t\t\tsession: getStashedSession().token,\n\t\t});\n\n\t\treturn {\n\t\t\tbytes: response.bytes,\n\t\t\tsignature: response.signature,\n\t\t};\n\t};\n\n\t#signAndExecuteTransaction: SuiSignAndExecuteTransactionMethod = async ({\n\t\ttransaction,\n\t\taccount,\n\t\tchain,\n\t}) => {\n\t\tconst popup = new StashedPopup({\n\t\t\tname: this.#name,\n\t\t\torigin: this.#origin,\n\t\t\tchain,\n\t\t});\n\n\t\tconst tx = Transaction.from(await transaction.toJSON());\n\t\ttx.setSenderIfNotSet(account.address);\n\n\t\tconst data = await tx.toJSON();\n\n\t\tconst response = await popup.send({\n\t\t\ttype: 'sign-and-execute-transaction',\n\t\t\ttransaction: data,\n\t\t\taddress: account.address,\n\t\t\tchain,\n\t\t\tsession: getStashedSession().token,\n\t\t});\n\t\treturn {\n\t\t\tbytes: response.bytes,\n\t\t\tsignature: response.signature,\n\t\t\tdigest: response.digest,\n\t\t\teffects: response.effects || '',\n\t\t};\n\t};\n\n\t#signPersonalMessage: SuiSignPersonalMessageMethod = async ({ message, account }) => {\n\t\tconst popup = new StashedPopup({\n\t\t\tname: this.#name,\n\t\t\torigin: this.#origin,\n\t\t});\n\n\t\tconst response = await popup.send({\n\t\t\ttype: 'sign-personal-message',\n\t\t\tmessage: toBase64(message),\n\t\t\taddress: account.address,\n\t\t\tsession: getStashedSession().token,\n\t\t});\n\n\t\treturn {\n\t\t\tbytes: response.bytes,\n\t\t\tsignature: response.signature,\n\t\t};\n\t};\n\n\t#on: StandardEventsOnMethod = (event, listener) => {\n\t\tthis.#events.on(event, listener);\n\t\treturn () => this.#events.off(event, listener);\n\t};\n\n\tremoveAccount(address: string) {\n\t\tconst { accounts, token } = getStashedSession();\n\n\t\tconst filteredAccounts = accounts.filter((account) => account.address !== address);\n\t\tif (filteredAccounts.length !== accounts.length) {\n\t\t\tlocalStorage.setItem(\n\t\t\t\tSTASHED_SESSION_KEY,\n\t\t\t\tJSON.stringify({\n\t\t\t\t\taccounts: filteredAccounts,\n\t\t\t\t\ttoken,\n\t\t\t\t}),\n\t\t\t);\n\t\t}\n\n\t\tthis.#accounts = this.#accounts.filter((account) => account.address !== address);\n\n\t\tthis.#events.emit('change', { accounts: this.accounts });\n\t}\n\n\t#setAccounts(accounts?: StashedAccount[]) {\n\t\tif (accounts && accounts.length) {\n\t\t\tthis.#accounts = accounts.map((account) => {\n\t\t\t\treturn new ReadonlyWalletAccount({\n\t\t\t\t\taddress: account.address,\n\t\t\t\t\tchains: [SUI_MAINNET_CHAIN],\n\t\t\t\t\tfeatures: ['sui:signTransactionBlock', 'sui:signPersonalMessage'],\n\t\t\t\t\tpublicKey: account.publicKey ? fromBase64(account.publicKey) : new Uint8Array(),\n\t\t\t\t});\n\t\t\t});\n\t\t} else {\n\t\t\tthis.#accounts = [];\n\t\t}\n\n\t\tthis.#events.emit('change', { accounts: this.accounts });\n\t}\n\n\t#connect: StandardConnectMethod = async (input) => {\n\t\tif (input?.silent) {\n\t\t\tconst { accounts } = getStashedSession();\n\n\t\t\tif (accounts.length) {\n\t\t\t\tthis.#setAccounts(accounts);\n\t\t\t}\n\n\t\t\treturn { accounts: this.accounts };\n\t\t}\n\t\tconst popup = new StashedPopup({\n\t\t\tname: this.#name,\n\t\t\torigin: this.#origin,\n\t\t});\n\n\t\tconst response = await popup.send({\n\t\t\ttype: 'connect',\n\t\t});\n\n\t\tif (!('accounts' in response)) {\n\t\t\tthrow new Error('Unexpected response');\n\t\t}\n\n\t\tlocalStorage.setItem(\n\t\t\tSTASHED_SESSION_KEY,\n\t\t\tJSON.stringify({ accounts: response.accounts, token: response.session }),\n\t\t);\n\n\t\tthis.#setAccounts(response.accounts);\n\n\t\treturn { accounts: this.accounts };\n\t};\n\n\t#disconnect: StandardDisconnectMethod = async () => {\n\t\tlocalStorage.removeItem(STASHED_SESSION_KEY);\n\n\t\tthis.#setAccounts();\n\t};\n}\nasync function fetchMetadata(metadataApiUrl: string): Promise<WalletMetadata> {\n\tconst response = await fetch(metadataApiUrl);\n\tif (!response.ok) {\n\t\tthrow new Error('Failed to fetch wallet metadata');\n\t}\n\tconst data = await response.json();\n\treturn parse(WalletMetadataSchema, data);\n}\n\nexport async function registerStashedWallet(\n\tname: string,\n\t{\n\t\torigin,\n\t\tmetadataApiUrl = METADATA_API_URL,\n\t}: {\n\t\torigin?: string;\n\t\tmetadataApiUrl?: string;\n\t} = {},\n) {\n\tconst wallets = getWallets();\n\n\tconst extension = wallets.get().find((wallet) => wallet.id === SUI_WALLET_EXTENSION_ID);\n\tif (extension) {\n\t\treturn;\n\t}\n\n\tlet metadata: WalletMetadata | undefined;\n\ttry {\n\t\tmetadata = await fetchMetadata(metadataApiUrl);\n\t} catch (error) {\n\t\tconsole.error('Error fetching metadata', error);\n\t}\n\n\tif (!metadata?.enabled) {\n\t\tconsole.log('Stashed wallet is not currently enabled.');\n\t\treturn;\n\t}\n\tconst stashedWalletInstance = new StashedWallet({\n\t\tname,\n\t\torigin,\n\t\tmetadata,\n\t});\n\n\tconst unregister = wallets.register(stashedWalletInstance);\n\n\t// listen for wallet registration\n\twallets.on('register', (wallet) => {\n\t\tif (wallet.id === SUI_WALLET_EXTENSION_ID) {\n\t\t\tunregister();\n\t\t}\n\t});\n\n\treturn {\n\t\twallet: stashedWalletInstance,\n\t\tunregister,\n\t};\n}\n"],
  "mappings": "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",
  "names": ["mitt"]
}
